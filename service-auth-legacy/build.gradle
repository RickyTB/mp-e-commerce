plugins {
    id 'java'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'application'
}

group = 'com.programacion'
version = '1.0-SNAPSHOT'

description = "MicroProfile Starter example"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    helidonversion = '2.2.0'
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    // import Helidon BOM
    implementation 'io.vertx:vertx-auth-jwt:3.9.5'

    implementation 'io.helidon.microprofile.bundles:helidon-microprofile:2.0.1'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-jpa:2.0.1'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld:2.0.1'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-datasource-hikaricp:2.0.1'
    implementation 'io.helidon.integrations.cdi:helidon-integrations-cdi-hibernate:2.0.0'
    implementation 'org.postgresql:postgresql:42.2.7'
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.2'
    implementation 'javax.transaction:javax.transaction-api:1.2'
    runtimeOnly 'org.jboss:jandex:2.1.1.Final'
    runtimeOnly 'jakarta.activation:jakarta.activation-api:1.2.2'
}

// define a custom task to copy all dependencies in the runtime classpath
// into build/libs/libs
// uses built-in Copy
task copyLibs(type: Copy) {
  from configurations.runtimeClasspath
  into 'build/libs/libs'
}

// add it as a dependency of built-in task 'assemble'
copyLibs.dependsOn jar
assemble.dependsOn copyLibs

// default jar configuration
// set the main classpath
// add each jar under build/libs/libs into the classpath
jar {
  archiveFileName = "${project.name}.jar"
  manifest {
    attributes ('Main-Class': 'io.helidon.microprofile.cdi.Main',
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
               )
  }
}

application {
    // Define the main class for the application.
    mainClass = 'io.helidon.microprofile.server.Main'
}

sourceSets {
  	main {
  	    output.resourcesDir=file("${buildDir}/classes/java/main")
    }
}
